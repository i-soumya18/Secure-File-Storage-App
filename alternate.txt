main1
import androidx.compose.desktop.ui.tooling.preview.Preview
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Window
import androidx.compose.ui.window.application
import java.io.File
import java.security.MessageDigest

data class User(val username: String, val passwordHash: ByteArray, val securityQuestion: String, val securityAnswer: String)

@Composable
@Preview
fun App() {
    var currentUser by remember { mutableStateOf<User?>(null) }
    var showSignInScreen by remember { mutableStateOf(true) }
    var showPasswordReset by remember { mutableStateOf(false) }
    var message by remember { mutableStateOf("") }
    var newPassword by remember { mutableStateOf("") }
    var failedAttempts by remember { mutableStateOf(0) }

    MaterialTheme {
        if (showSignInScreen) {
            SignInScreen(
                onSignIn = { user ->
                    currentUser = user
                    showSignInScreen = false
                    message = "Welcome, ${currentUser?.username}!"
                },
                onPasswordResetRequest = {
                    failedAttempts++
                    if (failedAttempts >= 3) {
                        showPasswordReset = true
                    }
                }
            )
        } else {
            MainScreen(
                currentUser = currentUser!!,
                onSignOut = {
                    currentUser = null
                    showSignInScreen = true
                },
                message = message
            )
        }

        if (showPasswordReset) {
            PasswordResetScreen(
                onResetPassword = { newPasswordValue ->
                    currentUser = currentUser!!.copy(passwordHash = hashPassword(newPasswordValue))
                    message = "Password reset successful!"
                    failedAttempts = 0
                    showPasswordReset = false
                },
                onCancel = {
                    showPasswordReset = false
                }
            )
        }
    }
}

@Composable
fun SignInScreen(
    onSignIn: (User) -> Unit,
    onPasswordResetRequest: () -> Unit
) {
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var securityAnswer by remember { mutableStateOf("") }

    Column(
        modifier = Modifier.padding(16.dp).fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Sign In", style = MaterialTheme.typography.h4)
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = username,
            onValueChange = { username = it },
            label = { Text("Username") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))
        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))
        Button(onClick = {
            // Simulate user authentication
            if (username.isNotEmpty() && password.isNotEmpty()) {
                val user = loadUser(username)
                if (user != null && checkPassword(password, user.passwordHash)) {
                    onSignIn(user)
                } else {
                    onPasswordResetRequest()
                }
            }
        }) {
            Text("Sign In")
        }
    }
}

@Composable
fun MainScreen(currentUser: User, onSignOut: () -> Unit, message: String) {
    var filesList by remember { mutableStateOf(listOf<File>()) }

    LaunchedEffect(Unit) {
        filesList = getEncryptedFiles()
    }

    Column(
        modifier = Modifier.padding(16.dp).fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("Welcome, ${currentUser.username}!", style = MaterialTheme.typography.h4)
        Spacer(modifier = Modifier.height(16.dp))
        if (message.isNotEmpty()) {
            Text(message)
            Spacer(modifier = Modifier.height(16.dp))
        }
        Button(onClick = {
            onSignOut()
        }) {
            Text("Sign Out")
        }
        Spacer(modifier = Modifier.height(16.dp))
        Text("Stored Files:", style = MaterialTheme.typography.h6)
        filesList.forEach { file ->
            Text(file.name)
        }
    }
}

@Composable
fun PasswordResetScreen(
    onResetPassword: (String) -> Unit,
    onCancel: () -> Unit
) {
    var newPassword by remember { mutableStateOf("") }
    var securityAnswer by remember { mutableStateOf("") }

    Column(
        modifier = Modifier.padding(16.dp).fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Password Reset", style = MaterialTheme.typography.h4)
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = securityAnswer,
            onValueChange = { securityAnswer = it },
            label = { Text("Security Answer") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))
        OutlinedTextField(
            value = newPassword,
            onValueChange = { newPassword = it },
            label = { Text("New Password") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(8.dp))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.End
        ) {
            Button(onClick = onCancel) {
                Text("Cancel")
            }
            Spacer(modifier = Modifier.width(8.dp))
            Button(onClick = {
                onResetPassword(newPassword)
            }) {
                Text("Reset Password")
            }
        }
    }
}

fun loadUser(username: String): User? {
    val userFile = File("user_$username.dat")
    return if (userFile.exists()) {
        val bytes = userFile.readBytes()
        val (username, passwordHash, securityQuestion, securityAnswer) = bytes.decodeToString().split(":")
        User(username, passwordHash.toByteArray(), securityQuestion, securityAnswer)
    } else {
        null
    }
}

fun checkPassword(password: String, passwordHash: ByteArray): Boolean {
    val hash = hashPassword(password)
    return hash.contentEquals(passwordHash)
}

fun hashPassword(password: String): ByteArray {
    val digest = MessageDigest.getInstance("SHA-256")
    return digest.digest(password
        .toByteArray())
}

fun getEncryptedFiles(): List<File> {
    val files = mutableListOf<File>()
    val dir = File("encrypted")
    if (dir.exists()) {
        dir.listFiles()?.forEach { file ->
            files.add(file)
        }
    }
    return files
}

fun main() = application {
    Window(onCloseRequest = ::exitApplication) {
        App()
    }
}

